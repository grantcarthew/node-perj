const Perj = require('../src/perj')
const Tool = require('./tool')
const tool = new Tool()
const data = require('../data')
const write = tool.write.bind(tool)
const passThrough = true

beforeEach(() => {
  tool.reset()
})

describe('top level properties tests', () => {
  test('parent top level properties', () => {
    let log = new Perj({ write, passThrough, foo: 'bar', bop: 22, bee: true, baz: undefined, boo: null })
    log.info(data.msg[0], data.tardis)
    expect(Object.keys(tool.jsonOut).length).toBe(10)
    expect(tool.jsonOut.level).toBe('info')
    expect(tool.objOut.level).toBe('info')
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe(data.msg[0])
    expect(tool.objOut.msg).toBe(data.msg[0])
    expect(tool.jsonOut.foo).toBe('bar')
    expect(tool.objOut.foo).toBe('bar')
    expect(tool.jsonOut.bop).toBe(22)
    expect(tool.objOut.bop).toBe(22)
    expect(tool.jsonOut.bee).toBe(true)
    expect(tool.objOut.bee).toBe(true)
    expect(tool.jsonOut.baz).toBe(null)
    expect(tool.objOut.baz).toBe(null)
    expect(tool.jsonOut.boo).toBe(null)
    expect(tool.objOut.boo).toBe(null)
    expect(tool.jsonOut.data).toMatchObject(data.tardis)
    expect(data.tardis).toMatchObject(tool.jsonOut.data)
    expect(tool.objOut.data).toMatchObject(data.tardis)
    expect(data.tardis).toMatchObject(tool.objOut.data)
  })
  test('child top level properties', () => {
    let log = new Perj({ write, passThrough })
    let child = log.child({ foo: 'bar', bop: 22, bee: true, baz: undefined, boo: null })
    child.info(data.msg[0], data.tardis)
    expect(Object.keys(tool.jsonOut).length).toBe(10)
    expect(tool.jsonOut.level).toBe('info')
    expect(tool.objOut.level).toBe('info')
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe(data.msg[0])
    expect(tool.objOut.msg).toBe(data.msg[0])
    expect(tool.jsonOut.foo).toBe('bar')
    expect(tool.objOut.foo).toBe('bar')
    expect(tool.jsonOut.bop).toBe(22)
    expect(tool.objOut.bop).toBe(22)
    expect(tool.jsonOut.bee).toBe(true)
    expect(tool.objOut.bee).toBe(true)
    expect(tool.jsonOut.baz).toBe(null)
    expect(tool.objOut.baz).toBe(null)
    expect(tool.jsonOut.boo).toBe(null)
    expect(tool.objOut.boo).toBe(null)
    expect(tool.jsonOut.data).toMatchObject(data.tardis)
    expect(data.tardis).toMatchObject(tool.jsonOut.data)
    expect(tool.objOut.data).toMatchObject(data.tardis)
    expect(data.tardis).toMatchObject(tool.objOut.data)
  })
})
