import test from "tape";
import { Perj } from "../src/perj.js";
import { Tool } from "./tool.js";
import { data } from "../data/index.js";
import { assertObjectSubsetMatch } from "./asserts.js";

const tool = new Tool();
const write = tool.write.bind(tool);
const passThrough = true;

test("top level properties tests", (t) => {
  t.test(`${t.name}: parent top level properties`, (t) => {
    tool.reset();
    let log = new Perj({ write, passThrough, foo: "bar", bop: 22, bee: true, baz: undefined, boo: null });
    log.info(data.msg[0], data.tardis);
    t.equal(Object.keys(tool.jsonOut).length, 10);
    t.equal(tool.jsonOut.level, "info");
    t.equal(tool.objOut.level, "info");
    t.equal(tool.getType(tool.jsonOut.time), "Number");
    t.equal(tool.getType(tool.objOut.time), "Number");
    t.equal(tool.jsonOut.msg, data.msg[0]);
    t.equal(tool.objOut.msg, data.msg[0]);
    t.equal(tool.jsonOut.foo, "bar");
    t.equal(tool.objOut.foo, "bar");
    t.equal(tool.jsonOut.bop, 22);
    t.equal(tool.objOut.bop, 22);
    t.equal(tool.jsonOut.bee, true);
    t.equal(tool.objOut.bee, true);
    t.equal(tool.jsonOut.baz, null);
    t.equal(tool.objOut.baz, null);
    t.equal(tool.jsonOut.boo, null);
    t.equal(tool.objOut.boo, null);
    assertObjectSubsetMatch(t, tool.jsonOut.data, data.tardis);
    assertObjectSubsetMatch(t, data.tardis, tool.jsonOut.data);
    assertObjectSubsetMatch(t, tool.objOut.data, data.tardis);
    assertObjectSubsetMatch(t, data.tardis, tool.objOut.data);
    t.end();
  });
  t.test(`${t.name}: child top level properties`, (t) => {
    tool.reset();
    let log = new Perj({ write, passThrough });
    let child = log.child({ foo: "bar", bop: 22, bee: true, baz: undefined, boo: null });
    child.info(data.msg[0], data.tardis);
    t.equal(Object.keys(tool.jsonOut).length, 10);
    t.equal(tool.jsonOut.level, "info");
    t.equal(tool.objOut.level, "info");
    t.equal(tool.getType(tool.jsonOut.time), "Number");
    t.equal(tool.getType(tool.objOut.time), "Number");
    t.equal(tool.jsonOut.msg, data.msg[0]);
    t.equal(tool.objOut.msg, data.msg[0]);
    t.equal(tool.jsonOut.foo, "bar");
    t.equal(tool.objOut.foo, "bar");
    t.equal(tool.jsonOut.bop, 22);
    t.equal(tool.objOut.bop, 22);
    t.equal(tool.jsonOut.bee, true);
    t.equal(tool.objOut.bee, true);
    t.equal(tool.jsonOut.baz, null);
    t.equal(tool.objOut.baz, null);
    t.equal(tool.jsonOut.boo, null);
    t.equal(tool.objOut.boo, null);
    assertObjectSubsetMatch(t, tool.jsonOut.data, data.tardis);
    assertObjectSubsetMatch(t, data.tardis, tool.jsonOut.data);
    assertObjectSubsetMatch(t, tool.objOut.data, data.tardis);
    assertObjectSubsetMatch(t, data.tardis, tool.objOut.data);
    t.end();
  });
  t.end();
});
